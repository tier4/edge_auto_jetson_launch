<launch>
  <!-- input topic name to be subscribed (bbox) -->
  <arg name="input/objects" default="/perception/object_recognition/detection/rois0" />
  <!-- input topic name to be subscribed (image for visualizer) -->
  <arg name="input/image" default="image_raw" />
  <!-- flag to describe whether input topic is raw or compressed  -->
  <arg name="input/image/is_raw" default="True" />
  <!-- output topic name to be published (bbox) -->
  <arg name="output/objects" default="/perception/object_recognition/detection/tracked/rois0" />
  <!-- container naem that this ROS node to be loaded -->
  <arg name="container_name" default="" />
  <!-- flag to use ROS2 intra process -->
  <arg name="use_intra_process" default="True" />
  <!-- flag to enable autoware_bytetrack visualization -->
  <arg name="enable_bytetrack_visualizer" default="True" />

  <!-- algorithm parameters -->
  <arg name="track_buffer_length" default="30"
       description="The frame count length that a tracklet is considered to be valid" />

  <let name="empty_container_is_specified" value="$(eval 'not &quot;$(var container_name)&quot;')" />
  <!-- If container name is not specified,
       execute function as an individual node  -->
  <group if="$(var empty_container_is_specified)">
    <node pkg="autoware_bytetrack" exec="bytetrack_node_exe" name="bytetrack">
      <remap from="~/in/rect" to="$(var input/objects)"/>
      <remap from="~/out/objects" to="$(var output/objects)"/>
      <remap from="~/out/objects/debug/uuid" to="$(var output/objects)/debug/uuid"/>
      <param name="track_buffer_length" value="$(var track_buffer_length)"/>
    </node>
  </group>

  <!-- If container name is specified,
       execute function as a composable node and load it into the container  -->
  <group unless="$(var empty_container_is_specified)">
    <load_composable_node target="$(var container_name)">
      <composable_node pkg="autoware_bytetrack" plugin="autoware::bytetrack::ByteTrackNode" name="bytetrack">
        <remap from="~/in/rect" to="$(var input/objects)"/>
        <remap from="~/out/objects" to="$(var output/objects)"/>
        <remap from="~/out/objects/debug/uuid" to="$(var output/objects)/debug/uuid"/>
        <param name="track_buffer_length" value="$(var track_buffer_length)"/>
        <extra_arg name="use_intra_process_comms" value="$(var use_intra_process)"/>
      </composable_node>
    </load_composable_node>
  </group>

  <!-- Execute visualizer as a separated node -->
  <node pkg="autoware_bytetrack" exec="bytetrack_visualizer_node_exe"
        name="bytetrack_visualizer" if="$(var enable_bytetrack_visualizer)">
    <remap from="~/in/image" to="$(var input/image)" />
    <remap from="~/in/rect" to="$(var output/objects)" />
    <remap from="~/in/uuid" to="$(var output/objects)/debug/uuid" />
    <remap from="~/out/image" to="$(var output/objects)/debug/image" />
    <remap from="~/out/image/compressed" to="$(var output/objects)/debug/image/compressed" />
    <remap from="~/out/image/compressedDepth" to="$(var output/objects)/debug/image/compressedDepth" />
    <remap from="~/out/image/theora" to="$(var output/objects)/debug/image/theora" />
    <param name="use_raw" value="$(var input/image/is_raw)" />
  </node>

</launch>
