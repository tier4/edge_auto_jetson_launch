<launch>
  <!-- image topic name to be subscribed -->
  <arg name="input/image" default="image_raw"/>
  <arg name="output/objects" default="/perception/object_recognition/detection/rois0"/>
  <arg name="model_name" default="yolox-sPlus-opt"/>
  <arg name="data_path" default="$(env HOME)/autoware_data" description="packages data and artifacts directory path"/>
  <arg name="yolox_param_path" default="$(find-pkg-share edge_auto_jetson_launch)/config/yolox.param.yaml"/>
  <arg name="build_only" default="false" description="exit after trt engine is built"/>
  <arg name="camera_id" default="0" />
  <arg name="container_name" default="" />

  <let name="empty_container_is_specified" value="$(eval 'not &quot;$(var container_name)&quot;')" />
  <!-- If container name is not specified,
       execute function as an individual node  -->
  <group if="$(var empty_container_is_specified)">
    <node pkg="autoware_tensorrt_yolox" exec="autoware_tensorrt_yolox_node_exe" name="tensorrt_yolox_$(var camera_id)" output="screen">
      <remap from="~/in/image" to="$(var input/image)"/>
      <remap from="~/out/objects" to="$(var output/objects)"/>
      <param from="$(var yolox_param_path)" allow_substs="true"/>
      <param name="build_only" value="$(var build_only)"/>
    </node>
  </group>

  <!-- If container name is specified,
       execute function as a composable node and load it into the container  -->
  <group unless= "$(var empty_container_is_specified)">
    <load_composable_node target="$(var container_name)">
      <composable_node pkg="autoware_tensorrt_yolox" plugin="autoware::tensorrt_yolox::TrtYoloXNode" name="tensorrt_yolox_$(var camera_id)">
        <remap from="~/in/image" to="$(var input/image)"/>
        <remap from="~/out/objects" to="$(var output/objects)"/>
        <param from="$(var yolox_param_path)" allow_substs="true"/>
        <param name="build_only" value="$(var build_only)"/>
        <extra_arg name="use_intra_process_comms" value="true" />
      </composable_node>
    </load_composable_node>
  </group>

</launch>
