<launch>
  <!-- image topic name to be subscribed -->
  <arg name="input/compressed_image" default="image_raw/compressed" />
  <!-- image topic name to be published -->
  <arg name="output/raw_image" default="image_raw" />

  <!-- container naem that this ROS node to be loaded -->
  <arg name="container_name" default="" />
  <!-- flag to use ROS2 intra process -->
  <arg name="use_intra_process" default="True" />

  <arg name="image_transport_decompressor_param_path" default="$(find-pkg-share edge_auto_jetson_launch)/config/image_transport_decompressor.param.yaml"/>

  <let name="empty_container_is_specified" value="$(eval 'not &quot;$(var container_name)&quot;')" />
  <!-- If container name is not specified,
       execute function as an individual node  -->
  <group if="$(var empty_container_is_specified)">
    <node pkg="autoware_image_transport_decompressor" exec="image_transport_decompressor_node" name="image_transport_decompressor">
      <remap from="~/input/compressed_image" to="$(var input/compressed_image)" />
      <remap from="~/output/raw_image" to="$(var output/raw_image)" />
      <param from="$(var image_transport_decompressor_param_path)"/>
    </node>
  </group>

  <!-- If container name is specified,
       execute function as a composable node and load it into the container  -->
  <group unless="$(var empty_container_is_specified)">
    <load_composable_node target="$(var container_name)">
      <composable_node pkg="autoware_image_transport_decompressor" plugin="autoware::image_preprocessor::ImageTransportDecompressor" name="image_transport_decompressor">
        <remap from="~/input/compressed_image" to="$(var input/compressed_image)" />
        <remap from="~/output/raw_image" to="$(var output/raw_image)" />
	      <param from="$(var image_transport_decompressor_param_path)"/>
        <extra_arg name="use_intra_process_comms" value="$(var use_intra_process)" />
      </composable_node>
    </load_composable_node>
  </group>
</launch>
